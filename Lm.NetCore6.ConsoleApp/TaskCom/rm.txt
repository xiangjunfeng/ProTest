1、Task的优势
　　ThreadPool相比Thread来说具备了很多优势，但是ThreadPool却又存在一些使用上的不方便。比如：
　　◆ ThreadPool不支持线程的取消、完成、失败通知等交互性操作；
　　◆ ThreadPool不支持线程执行的先后次序；
　　以往，如果开发者要实现上述功能，需要完成很多额外的工作，现在，FCL中提供了一个功能更强大的概念：Task。Task在线程池的基础上进行了优化，并提供了更多的API。在FCL4.0中，如果我们要编写多线程程序，Task显然已经优于传统的方式。

2、Task的用法
　　2.1、创建任务
　　无返回值的方式
　　方式1:
　　var t1 = new Task(() => TaskMethod("Task 1"));
　　t1.Start();
　　Task.WaitAll(t1);//等待所有任务结束
　　注:
　　任务的状态:
　　Start之前为:Created
　　Start之后为:WaitingToRun

　　方式2:
　　Task.Run(() => TaskMethod("Task 2"));

　　方式3:
　　Task.Factory.StartNew(() => TaskMethod("Task 3")); 直接异步的方法
　　或者
　　var t3=Task.Factory.StartNew(() => TaskMethod("Task 3"));
　　Task.WaitAll(t3);//等待所有任务结束
　　注:
　　任务的状态:
　　Start之前为:Running
　　Start之后为:Running

------------------------------------------------------------------------
C# Task的用法详解 z
https://www.cnblogs.com/lonelyxmas/p/9509298.html
https://www.cnblogs.com/zeroone/p/13625943.html